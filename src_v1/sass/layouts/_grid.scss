.row {
    max-width: $grid-width; // notice as long as main scss imports everything we don't need to spaghetti/import scss to each other
    background-color: transparent;
    margin: 0 auto; // trick to center in viewport -- auto means it auto calculates and splits right/left margin evenly

    // we want 0 margin on last row, so last-child would work, but the "not" operator works even better
    /*
    &:last-child {
        margin-bottom: 0px;
    }
    */

    //so using last-child you can overwrite the general margin-bottom property, but 
    // below, using not(lastchild) you can apply the general prop you want, and it does NOT apply to last child
    // basically we want 80px bottom margin on everything except last child
    &:not(:last-child) {
        margin-bottom: $gutter-vertical;
    }


    @include clearfix; // this uses our clearfix mixin code to fix the 0 height of our row when we float all contents of it

    //so below, most of the properties defining each column are the same, except the width calculations
    //we will use a attribute selector to group all the columns and assign them shared properties
    // its square brackets, then a caret to indicate we want our attribute selector to being with w/e is in quotes
    //[class*="col-"] with the * not ^ would mean select all classes that CONTAIN the string, not begin with it
    //[class$="col-"] with the $ not ^ would mean select all classes that ENDS with the string, not begin with it

    [class^="col-"] {
        float: left;
        background-color: transparent;

        &:not(:last-child) {
            margin-right: $gutter-horizontal; // basically applies gutterhorizontal except to last in row
        }
    }

    .col-1-of-2 {
        //using variables is like JS template string ${} but #{} swap the $ for a # symbol, easy
        width: calc((100% - #{$gutter-horizontal}) / 2); // calc the width IS SIMPLE: its the entire row width, minus gutter width, then divide by 2
    }

    .col-1-of-3 {
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3); // 100% of width, minus 2 gutters, and div that by 3 to get col width
    }

    .col-2-of-3 {
        width: calc(((100% - 2 * #{$gutter-horizontal}) / 3) * 2 + #{$gutter-horizontal}); // double the width of the col-1-of-3 above, plus a gutter
    }

    .col-1-of-4 {
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4); // 100% width, minus 3 gutters, divided into 4 columns
    }

    .col-2-of-4 {
        width: calc(((100% - 3 * #{$gutter-horizontal}) / 4) * 2 + (#{$gutter-horizontal})); // 2x width of col-1-of-4, plus a gutter
    }

    .col-3-of-4 {
        width: calc(((100% - 3 * #{$gutter-horizontal}) / 4) * 3 + (#{$gutter-horizontal} * 2)); // 3x width of col-1-of-4 above, plus 2 gutters
    }

}