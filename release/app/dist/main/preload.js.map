{"version":3,"file":"preload.js","mappings":"oCAAAA,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,wECtBA,iBAIA,EAAAQ,cAAcC,kBAAkB,WAAY,CAC1CC,YAAa,CACXC,YAAYC,EAAmBC,GAC7B,EAAAH,YAAYI,KAAKF,EAASC,EAC5B,EACAE,GAAGH,EAAmBI,GACpB,MAAMC,EAAe,CAACC,KAA6BL,IACjDG,KAAQH,GAGV,OAFA,EAAAH,YAAYK,GAAGH,EAASK,GAEjB,IAAM,EAAAP,YAAYS,eAAeP,EAASK,EACnD,EACAG,KAAKR,EAAmBI,GACtB,EAAAN,YAAYU,KAAKR,GAAS,CAACM,KAAWL,IAASG,KAAQH,IACzD,I","sources":["webpack://Warp/external node-commonjs \"electron\"","webpack://Warp/webpack/bootstrap","webpack://Warp/./src/main/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';\n\nexport type Channels = 'ipc-example';\n\ncontextBridge.exposeInMainWorld('electron', {\n  ipcRenderer: {\n    sendMessage(channel: Channels, args: unknown[]) {\n      ipcRenderer.send(channel, args);\n    },\n    on(channel: Channels, func: (...args: unknown[]) => void) {\n      const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n        func(...args);\n      ipcRenderer.on(channel, subscription);\n\n      return () => ipcRenderer.removeListener(channel, subscription);\n    },\n    once(channel: Channels, func: (...args: unknown[]) => void) {\n      ipcRenderer.once(channel, (_event, ...args) => func(...args));\n    },\n  },\n});\n// ipcRenderer.on('SET_SOURCE', async (event, sourceId) => {\n//   // console.log(sourceId);\n//   // try {\n//   //   const stream = await navigator.mediaDevices.getUserMedia({\n//   //     audio: false,\n//   //     video: {\n//   //       mandatory: {\n//   //         chromeMediaSource: 'desktop',\n//   //         chromeMediaSourceId: sourceId,\n//   //         minWidth: 1280,\n//   //         maxWidth: 1280,\n//   //         minHeight: 720,\n//   //         maxHeight: 720,\n//   //       },\n//   //     },\n//   //   });\n//   //   handleStream(stream);\n//   // } catch (e) {\n//   //   handleError(e);\n//   // }\n// });\n\nfunction handleStream(stream) {\n  const video = document.querySelector('video');\n  video.srcObject = stream;\n  video.onloadedmetadata = (e) => video.play();\n}\n\nfunction handleError(e) {\n  console.log(e);\n}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","contextBridge","exposeInMainWorld","ipcRenderer","sendMessage","channel","args","send","on","func","subscription","_event","removeListener","once"],"sourceRoot":""}